#!/usr/bin/env php
<?php

namespace Lkrms\Tests;

use Salient\Console\Target\StreamTarget;
use Salient\Console\Formatter;
use Salient\Core\Facade\Console;
use Salient\Core\Facade\Err;

require __DIR__ . '/../../vendor/autoload.php';

Err::register();

// Send all output, including debug messages and errors, to STDOUT
Console::registerTarget(StreamTarget::fromStream(\STDOUT));

$items = [
    [100, 101, 102, 103],
    [200, 201],
    [300, 301, 302],
];

Console::summary('Test started');
Console::summary('Initialization', 'complete', false, false, true);
Console::summary('Initialization', 'complete', false, true, false);
Console::summary('Initialization', 'complete', false, true, true);
Console::summary('Initialization', 'complete', true, false, false);
Console::summary('Initialization', 'complete', true, false, true);
Console::summary('Initialization', 'complete', true, true, false);
Console::summary('Initialization', 'complete', true, true, true);

Console::group('Processing items');
Console::info('Rows to process:', (string) count($items));

for ($i = 0; $i < count($items); $i++) {
    Console::group(
        'Processing row:',
        (string) ($i + 1),
        $i > 1 ? null : 'Finished processing row ' . ($i + 1),
    );
    Console::info('Items in row:', (string) count($items[$i]));

    for ($j = 0; $j < count($items[$i]); $j++) {
        Console::log('Processing item:', (string) $items[$i][$j]);
    }

    if ($i % 2) {
        Console::warn('WARNING: odd-numbered index at row:', (string) ($i + 1));
    } else {
        Console::debug('Row processing complete');
    }
    Console::groupEnd();
}

Console::groupEnd();

Console::summary('First test finished');

Console::error('This is an error', 'with a 2-part message');

$i = 0;

while ($i++ < 5) {
    Console::infoOnce(
        'This message is printed repeatedly',
        'but it should only appear once'
    );
    Console::logOnce(
        'This message is printed repeatedly',
        'but it should only appear once'
    );
    Console::debugOnce(
        'This message is printed repeatedly',
        'but it should only appear once'
    );
}

Console::info('`This is a __preformatted span__`,', "and here's a regular __span__");
Console::log('```
This is a __preformatted block__, with nothing else in the string
```');

Console::info("A \`preformatted\` __block__ starts after the next line.
___There should be no blank lines.___
```
~~Here's some \\\\```__preformatted__\`\`\` text.~~
```
And ... _done_. ~~Did two backslashes survive on the left? Three on the right?~~");

Console::log("A similar block, enclosed between __inline__ delimiters, starts after the next line.
___There should be blank lines.___
`
~~Here's some \\\\\\`\`\`__preformatted__\`\`\` text.~~
`
~~So let it be written. Hopefully with only one backslash. On the left.~~");

class TestClass
{
    public static function logDebugMessage(int $depth)
    {
        Console::debug("\$depth = $depth", null, null, $depth);
    }

    public static function callDebugLogger(int $depth = 0)
    {
        self::logDebugMessage($depth);
    }
}

TestClass::callDebugLogger();
TestClass::callDebugLogger(1);
TestClass::callDebugLogger(2);

var_dump($escaped = Formatter::escapeTags('Backticks (`) and backslashes (\) should be escaped (`, \)'));
Console::info($escaped);

for ($i = 1; $i <= 200; $i++) {
    Console::logProgress('Actioning:', "Item #$i of 200");
    usleep(10000);
}

Console::summary();
Console::summary('Done', '', false, false, true);
Console::summary('Done', '', false, true, false);
Console::summary('Done', '', false, true, true);
Console::summary('Done', '', true, false, false);
Console::summary('Done', '', true, false, true);
Console::summary('Done', '', true, true, false);
Console::summary('Done', '', true, true, true);
